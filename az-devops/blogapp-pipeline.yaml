name: "$(Date:yyyy).$(Date:MM).$(Rev:r)"

trigger:
  batch: true
  branches:
    include:
    - main
    - features/*
    - bugs/*
  paths:
    include:
    - src/*
    - tests/*
    - az-devops/*
    - BlogApp.sln
    - Directory.Build.props

pool:
  vmImage: ubuntu-16.04

variables:
  buildConfiguration: 'Release'
  appProjectDir: 'src/BlogApp.Api'
  coverageReportDir: '$(Build.SourcesDirectory)/$(appProjectDir)/coverlet/reports'

stages:
  - stage: Build
    displayName: Build
    jobs:
    - job:
      displayName: Build App
      steps:
      - task: DockerCompose@0
        displayName: Start dependencies (docker-compose)
        inputs:
          containerregistrytype: Container Registry
          dockerComposeFile: docker-compose.yml
          dockerComposeCommand: 'up -d'
      
      - task: UseDotNet@2
        displayName: Installing .NET SDK
        inputs:
          packageType: 'sdk'
          version: '3.1.x'

      - task: DotNetCoreCLI@2
        displayName: Install ReportGenerator tool
        inputs:
          command: custom
          custom: tool
          arguments: install --tool-path . dotnet-reportgenerator-globaltool --ignore-failed-sources

      - task: NuGetCommand@2
        displayName: Restore NuGet packages
        inputs:
          restoreSolution: BlogApp.sln
          includeNuGetOrg: true

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: $(appProjectDir)/BlogApp.Api.csproj
          arguments: '-c $(buildConfiguration) --no-restore'

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: 'tests/**/*.csproj'
          arguments: '-c $(buildConfiguration) --collect:"XPlat Code Coverage"'

      - script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(coverageReportDir) -reporttypes:"Cobertura"
        displayName: Create coverage reports

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(coverageReportDir)/Cobertura.xml

  - stage: DeployProdAU
    dependsOn:
    - Build
    jobs:
    - deployment: DeployProdAU
      displayName: Deploy ProdAU
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'ProdAU'
      strategy:
          runOnce:
            deploy:
              steps:
              - script: echo Hello world

